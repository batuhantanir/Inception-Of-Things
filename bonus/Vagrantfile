Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/jammy64"
  config.vm.hostname = "eyasabonus"

  # VM Resource Configuration
  config.vm.provider "virtualbox" do |v|
    v.memory = 4096
    v.cpus = 2
    v.name = "eyasabonus"
  end

  # Network Configuration
  config.vm.network "private_network", ip: "192.168.56.110"

  # Sync project folder
  config.vm.synced_folder ".", "/vagrant", type: "virtualbox"

  # Installation Script
  config.vm.provision "shell", inline: <<-SHELL
    # Update system
    apt-get update
    apt-get upgrade -y

    # Install required packages
    apt-get install -y curl wget apt-transport-https ca-certificates software-properties-common

    # Install Docker
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
    usermod -aG docker vagrant

    # Install kubectl
    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

    # Install k3d
    wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash

    # Install Helm
    curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

    # Add GitLab Helm repository
    helm repo add gitlab https://charts.gitlab.io/
    helm repo update

    # Add entries to /etc/hosts
    echo "192.168.56.110 gitlab.local" >> /etc/hosts
    echo "192.168.56.110 argocd.local" >> /etc/hosts

    # Create installation directory
    mkdir -p /vagrant/scripts
    
    # Create cluster and install components when the machine starts
    cat > /vagrant/scripts/start.sh <<'EOF'
#!/bin/bash

# Delete existing cluster if it exists
k3d cluster delete eyasa-bonus 2>/dev/null

# Create k3d cluster with port forwarding
k3d cluster create eyasa-bonus \
  --servers 1 \
  --agents 1 \
  --port "80:80@loadbalancer" \
  --port "443:443@loadbalancer" \
  --api-port 6443

# Wait for cluster to be ready
kubectl wait --for=condition=Ready nodes --all --timeout=120s

# Create namespaces
kubectl create namespace argocd
kubectl create namespace dev
kubectl create namespace gitlab

# Install NGINX Ingress Controller
echo "Installing NGINX Ingress Controller..."
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/cloud/deploy.yaml

# Wait for NGINX Ingress Controller to be ready
echo "Waiting for NGINX Ingress Controller..."
kubectl wait --namespace ingress-nginx \
  --for=condition=ready pod \
  --selector=app.kubernetes.io/component=controller \
  --timeout=120s

# Install GitLab
echo "Installing GitLab..."
helm upgrade --install gitlab gitlab/gitlab \
  --namespace gitlab \
  --version 8.11.1 \
  --set certmanager-issuer.email=emirys774@gmail.com \
  --set global.image.pullPolicy=IfNotPresent \
  --timeout 10m \
  -f /vagrant/confs/gitlab.values.yaml

# Install ArgoCD
echo "Installing ArgoCD..."
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

# Wait for ArgoCD to be ready
kubectl wait --namespace argocd \
  --for=condition=ready pod \
  --selector=app.kubernetes.io/name=argocd-server \
  --timeout=300s

# Configure ArgoCD to run in insecure mode
kubectl patch deployment argocd-server -n argocd -p '{"spec": {"template": {"spec": {"containers": [{"name": "argocd-server","command": ["argocd-server","--insecure","--staticassets","/shared/app"]}]}}}}'

# Apply other Kubernetes resources
kubectl apply -n argocd -f /vagrant/confs/application.yaml
kubectl apply -n dev -f /vagrant/confs/deployment.yaml
kubectl apply -n dev -f /vagrant/confs/service.yaml
kubectl apply -f /vagrant/confs/gitlab-ingress.yaml
kubectl apply -f /vagrant/confs/argocd-ingress.yaml

# Save passwords
echo "Saving passwords..."
echo "GitLab Password: $(kubectl get secret gitlab-gitlab-initial-root-password -n gitlab -ojsonpath='{.data.password}' | base64 -d)" > /vagrant/password.txt
echo "ArgoCD Password: $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath='{.data.password}' | base64 -d)" >> /vagrant/password.txt

echo "Installation completed!"
echo "Access URLs:"
echo "GitLab: http://gitlab.local"
echo "ArgoCD: http://argocd.local"
echo "Passwords are saved in password.txt"
EOF

    chmod +x /vagrant/scripts/start.sh

    # Add start script to .bashrc to run when user logs in
    echo "echo 'To start the cluster and services, run: /vagrant/scripts/start.sh'" >> /home/vagrant/.bashrc
  SHELL
end 